import { Coordinates } from "./Coordinates";
import { TitleParameters } from "./TitleParameters";
export interface StreamDeckEvent {
    event: string;
}
export interface ActionEvent<T = unknown> extends StreamDeckEvent {
    context: string;
    coordinates: {
        column: number;
        row: number;
    };
    isInMultiAction: boolean;
    settings: T;
    state: number;
    userDesiredState: number;
}
export interface DidReceiveGlobalSettingsEvent<T = unknown> {
    event: string;
    settings: T;
}
export interface DidReceiveSettingsEvent<T = unknown> {
    action: string;
    event: string;
    context: string;
    device: string;
    settings: T;
    coordinates: Coordinates;
    isInMultiAction: boolean;
}
export type KeyDownEvent<T = unknown> = ActionEvent<T>;
export type KeyUpEvent<T = unknown> = ActionEvent<T>;
export type WillAppearEvent<T = unknown> = ActionEvent<T>;
export type WillDisappearEvent<T = unknown> = ActionEvent<T>;
export interface TitleParametersDidChangeEvent<T = unknown> extends StreamDeckEvent {
    coordinates: Coordinates;
    settings: T;
    state: number;
    title: string;
    titleParameters: TitleParameters;
}
export interface DeviceDidConnectEvent extends StreamDeckEvent {
    device: string;
    deviceInfo: {
        name: string;
        type: number;
        size: {
            columns: number;
            rows: number;
        };
    };
}
export interface DeviceDidDisconnectEvent extends StreamDeckEvent {
    device: string;
}
export interface ApplicationDidLaunchEvent extends StreamDeckEvent {
    application: string;
}
export interface ApplicationDidTerminateEvent extends StreamDeckEvent {
    application: string;
}
export type SystemWakeUpEvent = StreamDeckEvent;
export type PropertyInspectorDidAppearEvent<T = unknown> = ActionEvent<T>;
export type PropertyInspectorDidDisappearEvent<T = unknown> = ActionEvent<T>;
export type SendToPluginEvent<T = unknown> = ActionEvent<T>;
export type SendToPropertyInspectorEvent<T = unknown> = ActionEvent<T>;
export declare class Events<SettingsType = unknown, GlobalSettingsType = unknown> {
    debug(...args: unknown[]): void;
    handleMessage(_event: unknown): void;
    handleDidReceiveGlobalSettings(event: DidReceiveGlobalSettingsEvent<GlobalSettingsType>): void;
    handleDidReceiveSettings(event: DidReceiveSettingsEvent<SettingsType>): void;
    handleDidConnectToSocket(): void;
}
export declare class PluginEvents<SettingsType = unknown, GlobalSettingsType = unknown> extends Events<SettingsType, GlobalSettingsType> {
    handleTitleParametersDidChange(event: TitleParametersDidChangeEvent<SettingsType>): void;
    handleDeviceDidConnect(event: DeviceDidConnectEvent): void;
    handleDeviceDidDisconnect(event: DeviceDidDisconnectEvent): void;
    handleApplicationDidLaunch(event: ApplicationDidLaunchEvent): void;
    handleApplicationDidTerminate(event: ApplicationDidTerminateEvent): void;
    handleSystemDidWakeUp(event: SystemWakeUpEvent): void;
}
export declare class ActionEvents extends Events {
    handleKeyDown(event: KeyDownEvent): void;
    handleKeyUp(event: KeyUpEvent): void;
    handleWillAppear(event: WillAppearEvent): void;
    handleWillDisappear(event: WillDisappearEvent): void;
    handlePropertyInspectorDidAppear(event: PropertyInspectorDidAppearEvent): void;
    handlePropertyInspectorDidDisappear(event: PropertyInspectorDidDisappearEvent): void;
    handleSendToPlugin(event: SendToPluginEvent): void;
}
export declare class InspectorEvents<SettingsType = unknown, GlobalSettingsType = SettingsType> extends Events<SettingsType, GlobalSettingsType> {
    handleSendToPropertyInspector(event: SendToPropertyInspectorEvent): void;
}
