"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Action = void 0;
const events_1 = require("./events");
const State_1 = require("./State");
const Target_1 = require("./Target");
class Action extends events_1.ActionEvents {
    constructor(params) {
        var _a, _b, _c;
        super();
        this.tooltip = "";
        this.hasMultiActionSupport = true;
        this.inspectorName = "";
        this.states = [];
        this.plugin = undefined;
        this.context = "";
        this.device = "";
        this.name = params.name;
        this.tooltip = (_a = params.tooltip) !== null && _a !== void 0 ? _a : "";
        this.hasMultiActionSupport = (_b = params.hasMultiActionSupport) !== null && _b !== void 0 ? _b : true;
        this.inspectorName = (_c = params.inspectorName) !== null && _c !== void 0 ? _c : "";
        this.states = params.states.map((s) => new State_1.State(Object.assign({ action: this }, s)));
    }
    get uuid() {
        return `${this.plugin.id}.${this.constructor.name.toLowerCase()}`;
    }
    toManifest() {
        const snippet = {
            Icon: `images/actions/${this.constructor.name}`,
            UUID: this.uuid,
            Name: this.name + (__DEV__ ? " (dev)" : ""),
            States: this.states.map((s) => s.toManifest()),
        };
        const optionals = [
            [
                "PropertyInspectorPath",
                this.inspectorName,
                `inspectors/${this.inspectorName}.html`,
            ],
            ["Tooltip", this.tooltip, this.tooltip],
            [
                "SupportedInMultiActions",
                this.hasMultiActionSupport === false,
                this.hasMultiActionSupport,
            ],
        ];
        optionals.forEach(([prop, condition, value]) => {
            if (condition) {
                snippet[prop] = value;
            }
        });
        return snippet;
    }
    get id() {
        return `${this.plugin.id}.${this.constructor.name}`;
    }
    send(payload) {
        this.debug("Sending event:", payload);
        this.plugin.send(payload);
    }
    setTitle(input, { target = Target_1.Target.both, state } = {
        target: Target_1.Target.both,
    }) {
        this.send({
            event: "setTitle",
            context: this.context,
            payload: {
                title: String(input),
                target,
                state,
            },
        });
    }
    setImage(input, { target = Target_1.Target.both, state } = {
        target: Target_1.Target.both,
    }) {
        this.send({
            event: "setImage",
            context: this.context,
            payload: {
                image: String(input),
                target,
                state,
            },
        });
    }
    showAlert({ target = Target_1.Target.both, state } = {
        target: Target_1.Target.both,
    }) {
        this.send({
            event: "showAlert",
            context: this.context,
            payload: {
                target,
                state,
            },
        });
    }
    setSettings(payload) {
        this.send({
            event: "setSettings",
            context: this.context,
            payload,
        });
        this.getSettings();
    }
    getSettings() {
        this.send({
            event: "getSettings",
            context: this.context,
        });
    }
    setGlobalSettings(payload) {
        this.send({
            event: "setGlobalSettings",
            context: this.plugin.uuid,
            payload,
        });
        this.getGlobalSettings();
    }
    getGlobalSettings() {
        this.send({
            event: "getGlobalSettings",
            context: this.plugin.uuid,
        });
    }
    logMessage(message) {
        this.send({
            event: "logMessage",
            payload: { message },
        });
    }
    sendToPropertyInspector(payload) {
        this.send({
            action: this.id,
            event: "sendToPropertyInspector",
            context: this.context,
            payload,
        });
    }
    openURL(url) {
        this.send({
            event: "openUrl",
            payload: { url },
        });
    }
    showOK({ target = Target_1.Target.both, state } = {
        target: Target_1.Target.both,
    }) {
        this.plugin.send({
            event: "showOk",
            context: this.context,
            payload: {
                target,
                state,
            },
        });
    }
    setState(state) {
        this.plugin.send({
            event: "setState",
            context: this.context,
            payload: { state },
        });
    }
    switchToProfile(profile) {
        this.plugin.send({
            event: "switchToProfile",
            context: this.context,
            device: this.device,
            payload: { profile },
        });
    }
}
exports.Action = Action;
//# sourceMappingURL=Action.js.map