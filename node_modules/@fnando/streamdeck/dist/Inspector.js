"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inspector = void 0;
const events_1 = require("./events");
const runHandler_1 = require("./runHandler");
class Inspector extends events_1.InspectorEvents {
    constructor({ plugin }) {
        super();
        this.uuid = "";
        this.plugin = plugin;
    }
    send(payload) {
        var _a;
        this.debug("Sending event:", payload);
        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(payload));
    }
    setGlobalSettings(payload) {
        this.send({
            event: "setGlobalSettings",
            context: this.uuid,
            payload,
        });
        this.getGlobalSettings();
    }
    setSettings(payload) {
        this.send({
            event: "setSettings",
            context: this.uuid,
            payload,
        });
        this.getSettings();
    }
    getGlobalSettings() {
        this.send({ event: "getGlobalSettings", context: this.uuid });
    }
    getSettings() {
        this.send({ event: "getSettings", context: this.uuid });
    }
    openURL(url) {
        this.send({ event: "openUrl", payload: { url } });
    }
    logMessage(message) {
        this.send({ event: "logMessage", payload: { message } });
    }
    run() {
        const inspector = this;
        window.connectElgatoStreamDeckSocket =
            function connectElgatoStreamDeckSocket(port, uuid, registerEvent, _info, _actionInfo) {
                const socket = new WebSocket(`ws://127.0.0.1:${port}`);
                inspector.socket = socket;
                inspector.uuid = uuid;
                socket.onmessage = ({ data: rawData }) => {
                    const data = JSON.parse(rawData);
                    if (data.event === "didReceiveGlobalSettings") {
                        inspector.handleDidReceiveGlobalSettings({
                            event: data.event,
                            settings: data.payload.settings,
                        });
                        return;
                    }
                    (0, runHandler_1.runHandler)(inspector, data);
                };
                socket.onopen = () => {
                    inspector.send({ event: registerEvent, uuid });
                    setTimeout(() => {
                        inspector.getGlobalSettings();
                        inspector.getSettings();
                        inspector.handleDidConnectToSocket();
                    }, 300);
                };
            };
    }
}
exports.Inspector = Inspector;
//# sourceMappingURL=Inspector.js.map