"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.link = exports.unlink = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const fs_1 = __importDefault(require("fs"));
const bundle_1 = require("./bundle");
const die_1 = require("./helpers/die");
const pluginDirs = {
    darwin: path_1.default.join(os_1.default.homedir(), "Library/Application Support/com.elgato.StreamDeck/Plugins"),
    win32: path_1.default.join((_a = process.env.APPDATA) !== null && _a !== void 0 ? _a : path_1.default.join(os_1.default.homedir(), "AppData/Roaming"), "Elgato/StreamDeck/Plugins"),
};
function getData() {
    var _a;
    const pluginsDir = (_a = pluginDirs[process.platform]) !== null && _a !== void 0 ? _a : (0, die_1.die)("ERROR: Your operating system is not supported by this command.");
    const config = require(path_1.default.join(process.cwd(), "src/streamdeck.json"));
    const distDir = path_1.default.join(process.cwd(), `build/dev.${config.id}.sdPlugin`);
    const targetPath = path_1.default.join(pluginsDir, `dev.${config.id}.sdPlugin`);
    return { pluginsDir, distDir, targetPath };
}
function unlink() {
    const { targetPath } = getData();
    try {
        fs_1.default.unlinkSync(targetPath);
    }
    catch (error) {
    }
}
exports.unlink = unlink;
function link(params) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, bundle_1.bundle)({ dev: true });
        const { targetPath, distDir } = getData();
        const targetStat = fs_1.default.lstatSync(targetPath, { throwIfNoEntry: false });
        if (targetStat) {
            if (!params.force) {
                (0, die_1.die)(`ERROR: Couldn't link the extension because "${targetPath}" already exists.`);
            }
            fs_1.default.rmSync(targetPath, { recursive: true, force: true });
        }
        fs_1.default.symlinkSync(distDir, targetPath, "junction");
    });
}
exports.link = link;
//# sourceMappingURL=linking.js.map