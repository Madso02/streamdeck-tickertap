"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const die_1 = require("./helpers/die");
const exec_1 = require("./helpers/exec");
class FileUtils {
    constructor(destination, templateDir) {
        this.destination = destination;
        this.templateDir = templateDir;
    }
    copyFile(relativePath) {
        const filePath = path_1.default.join(this.destination, relativePath);
        fs_1.default.mkdirSync(path_1.default.dirname(filePath), { recursive: true });
        fs_1.default.copyFileSync(path_1.default.join(templateDir, relativePath), filePath);
    }
    createFile(relativePath, contents = "") {
        const filePath = path_1.default.join(this.destination, relativePath);
        fs_1.default.mkdirSync(path_1.default.dirname(filePath), { recursive: true });
        fs_1.default.writeFileSync(filePath, contents);
    }
    template(templatePath, outputPath, data) {
        const filePath = path_1.default.join(this.destination, outputPath);
        let contents = fs_1.default
            .readFileSync(path_1.default.join(this.templateDir, templatePath))
            .toString("utf-8");
        Object.keys(data).forEach((key) => {
            contents = contents.replace(new RegExp(`{${key}}`, "g"), String(data[key]));
        });
        fs_1.default.writeFileSync(filePath, contents);
    }
}
const templateDir = path_1.default.resolve(path_1.default.join(__dirname, "..", "..", "templates", "create"));
function getGitUser(params) {
    const gitConfig = (path) => {
        const result = (0, exec_1.exec)("git", ["config", "--get", path], {
            error: "",
            cwd: process.cwd(),
            exitOnError: false,
        });
        return result === null || result === void 0 ? void 0 : result.stdout.toString("utf-8").trim();
    };
    const authorName = params.author || gitConfig("user.name") || "[NAME]";
    return { authorName };
}
function create(params) {
    if (!params.path) {
        (0, die_1.die)("ERROR: you need to provide a path.");
    }
    const destination = path_1.default.resolve(params.path);
    if (fs_1.default.existsSync(destination)) {
        (0, die_1.die)(`ERROR: Path "${destination}" already exists.`);
    }
    if (params.github && params.gitlab) {
        (0, die_1.die)("ERROR: --github and --gitlab are mutually exclusive.");
    }
    fs_1.default.mkdirSync(destination, { recursive: true });
    const fileUtils = new FileUtils(destination, templateDir);
    const { authorName } = getGitUser(params);
    const repo = path_1.default.basename(destination);
    const gitUser = params.github || params.gitlab || "[USER]";
    const gitHost = params.gitlab ? "gitlab.com" : "github.com";
    const url = params.url || `https://${gitHost}/${gitUser}/${repo}`;
    const context = {
        year: new Date().getFullYear(),
        id: params.id,
        description: params.description,
        name: params.name,
        authorName,
        repo,
        gitUser,
        gitHost,
    };
    fileUtils.copyFile("tsconfig.json");
    fileUtils.copyFile("package.json");
    fileUtils.copyFile("src/css/sdpi.css");
    fileUtils.copyFile("src/inspector.html");
    fileUtils.copyFile("src/inspector.ts");
    fileUtils.copyFile("src/images/actions/Hello.png");
    fileUtils.copyFile("src/images/actions/Hello@2x.png");
    fileUtils.copyFile("src/images/actions/Hello/Key.png");
    fileUtils.copyFile("src/images/actions/Hello/Key@2x.png");
    fileUtils.copyFile("src/images/category.png");
    fileUtils.copyFile("src/images/category@2x.png");
    fileUtils.copyFile("src/images/plugin.png");
    fileUtils.copyFile("src/images/plugin@2x.png");
    fileUtils.copyFile("src/actions/Hello.ts");
    fileUtils.copyFile("src/plugin.ts");
    fileUtils.copyFile("icons.sketch");
    fileUtils.template("LICENSE.md", "LICENSE.md", context);
    fileUtils.template("CODE_OF_CONDUCT.md", "CODE_OF_CONDUCT.md", context);
    fileUtils.template("CHANGELOG.md", "CHANGELOG.md", context);
    if (params.gitlab) {
        fileUtils.template("gitlabREADME.md", "README.md", context);
    }
    else {
        fileUtils.template("githubREADME.md", "README.md", context);
    }
    fileUtils.createFile("release/.keep", "");
    fileUtils.createFile("src/streamdeck.json", JSON.stringify({
        id: params.id,
        version: "0.0.0",
        name: params.name,
        description: params.description,
        author: authorName,
        category: "Hello",
        monitor: { windows: [], mac: [] },
        url,
    }, null, 2));
    fileUtils.createFile("src/css/custom.css");
    fileUtils.createFile("src/images/embed/.keep");
    fileUtils.createFile("src/images/multiActions/.keep");
    fileUtils.createFile("src/inspectors/.keep");
    fileUtils.createFile("src/locales/.keep");
    fileUtils.createFile("src/images.json", "{}");
    fileUtils.createFile(".gitignore", ["/build"].join("\n"));
    if (params.install) {
        const error = "ERROR: Sorry, there was an error while installing dependencies.";
        (0, exec_1.exec)("npm", ["install"], { cwd: destination, error });
    }
    const error = "ERROR: Sorry, there was an error while initializing the Git repository.";
    (0, exec_1.exec)("git", ["init"], { cwd: destination, error });
    (0, exec_1.exec)("git", ["add", "."], { cwd: destination, error });
    (0, exec_1.exec)("git", ["commit", "--message", "Initial commit."], {
        cwd: destination,
        error,
    });
    if (params.github || params.gitlab) {
        (0, exec_1.exec)("git", ["remote", "add", "origin", `git@${gitHost}:${gitUser}/${repo}.git`], { cwd: destination, error });
    }
}
exports.create = create;
//# sourceMappingURL=create.js.map