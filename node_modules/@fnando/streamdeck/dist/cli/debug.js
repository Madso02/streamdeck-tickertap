"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debug = void 0;
const child_process_1 = __importDefault(require("child_process"));
const fs_1 = __importDefault(require("fs"));
const rage_edit_1 = __importDefault(require("rage-edit"));
const die_1 = require("./helpers/die");
const debuggerUrl = "http://127.0.0.1:23654/";
const browserPaths = [
    "/Applications/Google Chrome.app",
    "/Applications/Brave Browser.app",
    "/Applications/Microsoft Edge.app",
    "/Applications/Opera.app",
];
const enableSuccessMessage = "Debugging mode has been enabled. Please restart the Stream Deck app.";
const enableErrorMessage = "ERROR: Couldn't enable the debugging mode.";
const disableSuccessMessage = "Debugging mode has been disabled. Please restart the Stream Deck app.";
const disableErrorMessage = "ERROR: Couldn't disable debugging mode.";
const openDebugMessage = `The debugger url is ${debuggerUrl}`;
const handlers = {
    darwin: {
        enable() {
            const result = child_process_1.default.spawnSync("defaults", [
                "write",
                "com.elgato.StreamDeck",
                "html_remote_debugging_enabled",
                "-bool",
                "YES",
            ]);
            if (result.status === 0) {
                console.log(enableSuccessMessage);
            }
            else {
                (0, die_1.die)("ERROR: Couldn't enable debugging mode.");
            }
        },
        disable() {
            const result = child_process_1.default.spawnSync("defaults", [
                "write",
                "com.elgato.StreamDeck",
                "html_remote_debugging_enabled",
                "-bool",
                "NO",
            ]);
            if (result.status === 0) {
                console.log(disableSuccessMessage);
            }
            else {
                (0, die_1.die)(disableErrorMessage);
            }
        },
        open() {
            const browserPath = browserPaths.find((path) => fs_1.default.existsSync(path));
            if (browserPath) {
                const result = child_process_1.default.spawnSync("open", [
                    "-a",
                    browserPath,
                    debuggerUrl,
                ]);
                if (result.status === 0) {
                    return;
                }
            }
            console.log(openDebugMessage);
        },
    },
    win32: {
        enable() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    yield rage_edit_1.default.set("HKCU\\Software\\Elgato Systems GmbH\\StreamDeck", "html_remote_debugging_enabled", 1);
                    console.log(enableSuccessMessage);
                }
                catch (e) {
                    (0, die_1.die)(enableErrorMessage);
                }
            });
        },
        disable() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    yield rage_edit_1.default.set("HKCU\\Software\\Elgato Systems GmbH\\StreamDeck", "html_remote_debugging_enabled", 0);
                    console.log(disableSuccessMessage);
                }
                catch (e) {
                    (0, die_1.die)(disableErrorMessage);
                }
            });
        },
        open() {
            const result = child_process_1.default.spawnSync("start", [debuggerUrl]);
            if (result.status === 0) {
                return;
            }
            console.log(openDebugMessage);
        },
    },
    default: {
        open() {
            console.log(openDebugMessage);
        },
        enable() {
            (0, die_1.die)("ERROR: Your operating system is not supported by this command.");
        },
        disable() {
            (0, die_1.die)("ERROR: Your operating system is not supported by this command.");
        },
    },
};
function debug(params) {
    var _a;
    const handler = (_a = handlers[process.platform]) !== null && _a !== void 0 ? _a : handlers.default;
    if (params.action === "enable") {
        handler.enable();
    }
    else if (params.action === "disable") {
        handler.disable();
    }
    else {
        handler.open();
    }
}
exports.debug = debug;
//# sourceMappingURL=debug.js.map