"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InspectorEvents = exports.ActionEvents = exports.PluginEvents = exports.Events = void 0;
class Events {
    debug(...args) {
        console.log(`[${this.constructor.name}]`, ...args);
    }
    handleMessage(_event) {
    }
    handleDidReceiveGlobalSettings(event) {
        this.debug("Received didReceiveGlobalSettings event:", event);
    }
    handleDidReceiveSettings(event) {
        this.debug("Received didReceiveSettings event:", event);
    }
    handleDidConnectToSocket() {
        this.debug("Received didConnectToSocket event");
    }
}
exports.Events = Events;
class PluginEvents extends Events {
    handleTitleParametersDidChange(event) {
        this.debug("Received titleParametersDidChange event:", event);
    }
    handleDeviceDidConnect(event) {
        this.debug("Received deviceDidConnect event:", event);
    }
    handleDeviceDidDisconnect(event) {
        this.debug("Received deviceDidDisconnect event:", event);
    }
    handleApplicationDidLaunch(event) {
        this.debug("Received applicationDidLaunch event:", event);
    }
    handleApplicationDidTerminate(event) {
        this.debug("Received applicationDidTerminate event:", event);
    }
    handleSystemDidWakeUp(event) {
        this.debug("Received systemDidWakeUp event:", event);
    }
}
exports.PluginEvents = PluginEvents;
class ActionEvents extends Events {
    handleKeyDown(event) {
        this.debug("Received keyDown event:", event);
    }
    handleKeyUp(event) {
        this.debug("Received keyUp event:", event);
    }
    handleWillAppear(event) {
        this.debug("Received willAppear event:", event);
    }
    handleWillDisappear(event) {
        this.debug("Received willDisappear event:", event);
    }
    handlePropertyInspectorDidAppear(event) {
        this.debug("Received propertyInspectorDidAppear event:", event);
    }
    handlePropertyInspectorDidDisappear(event) {
        this.debug("Received propertyInspectorDidAppear event:", event);
    }
    handleSendToPlugin(event) {
        this.debug("Received sendToPlugin event:", event);
    }
    handleTouchTap(event) {
        this.debug("Received touchTap event:", event);
    }
    handleDialPress(event) {
        this.debug("Received dialPress event:", event);
    }
    handleDialRotate(event) {
        this.debug("Received dialRotate event:", event);
    }
}
exports.ActionEvents = ActionEvents;
class InspectorEvents extends Events {
    handleSendToPropertyInspector(event) {
        this.debug("Received sendToPropertyInspector event:", event);
    }
}
exports.InspectorEvents = InspectorEvents;
//# sourceMappingURL=events.js.map