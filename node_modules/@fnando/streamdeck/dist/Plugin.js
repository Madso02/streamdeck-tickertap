"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = void 0;
const events_1 = require("./events");
const OS_1 = require("./OS");
const runHandler_1 = require("./runHandler");
class Plugin extends events_1.PluginEvents {
    get id() {
        return __DEV__ ? `dev.${this.idInternal}` : this.idInternal;
    }
    constructor(params) {
        var _a, _b;
        super();
        this.version = "";
        this.sdkVersion = 2;
        this.url = "";
        this.name = "";
        this.author = "";
        this.minimumSoftwareVersion = "5.0";
        this.category = "";
        this.description = "";
        this.actions = [];
        this.os = [];
        this.uuid = "";
        this.description = params.description;
        this.url = params.url;
        this.author = params.author;
        this.name = params.name;
        this.idInternal = params.id;
        this.actions = params.actions;
        this.version = params.version;
        this.category = (_a = params.category) !== null && _a !== void 0 ? _a : "";
        this.os = (_b = params.os) !== null && _b !== void 0 ? _b : [
            new OS_1.OS({ platform: "windows", minimumVersion: "10" }),
            new OS_1.OS({ platform: "mac", minimumVersion: "10.11" }),
        ];
        this.actions.forEach((action) => {
            action.plugin = this;
        });
    }
    run() {
        const plugin = this;
        window.connectElgatoStreamDeckSocket =
            function connectElgatoStreamDeckSocket(port, uuid, registerEvent, _info) {
                const socket = new WebSocket(`ws://127.0.0.1:${port}`);
                plugin.socket = socket;
                plugin.uuid = uuid;
                socket.onopen = () => {
                    plugin.send({ event: registerEvent, uuid });
                    setTimeout(() => {
                        plugin.getGlobalSettings();
                        plugin.getSettings();
                        plugin.handleDidConnectToSocket();
                    }, 300);
                };
                socket.onmessage = ({ data: rawData }) => {
                    const data = JSON.parse(rawData);
                    if (data.event === "didReceiveGlobalSettings") {
                        const payload = {
                            event: data.event,
                            settings: data.payload.settings,
                        };
                        plugin.handleDidReceiveGlobalSettings(payload);
                        plugin.actions.forEach((action) => {
                            action.handleDidReceiveGlobalSettings(payload);
                        });
                        return;
                    }
                    const action = plugin.actions.find((a) => a.uuid === data.action);
                    if (!action) {
                        (0, runHandler_1.runHandler)(plugin, data);
                        return;
                    }
                    action.context = data.context;
                    action.device = data.device;
                    (0, runHandler_1.runHandler)(action, data);
                    action.handleMessage(data);
                };
            };
    }
    send(payload) {
        var _a;
        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(payload));
    }
    toManifest() {
        const snippet = {
            Author: this.author,
            Actions: this.actions.map((a) => a.toManifest()),
            CodePath: "plugin.html",
            Icon: "images/plugin",
            Name: this.name,
            Description: this.description,
            PropertyInspectorPath: "inspector.html",
            Version: this.version,
            SDKVersion: this.sdkVersion,
            Software: { MinimumVersion: this.minimumSoftwareVersion },
            OS: this.os.map((o) => o.toManifest()),
        };
        const optionals = [
            ["Category", this.category, this.category + (__DEV__ ? " (dev)" : "")],
            ["URL", this.url, this.url],
        ];
        if (this.category) {
            snippet.CategoryIcon = "images/category";
        }
        optionals.forEach(([prop, condition, value]) => {
            if (condition) {
                snippet[prop] = value;
            }
        });
        return snippet;
    }
    getGlobalSettings() {
        this.send({
            event: "getGlobalSettings",
            context: this.uuid,
        });
    }
    setGlobalSettings(payload) {
        this.send({
            event: "setGlobalSettings",
            context: this.uuid,
            payload,
        });
        this.getGlobalSettings();
    }
    getSettings() {
        this.send({
            event: "getSettings",
            context: this.uuid,
        });
    }
    setSettings(payload) {
        this.send({
            event: "setSettings",
            context: this.uuid,
            payload,
        });
        this.getSettings();
    }
}
exports.Plugin = Plugin;
//# sourceMappingURL=Plugin.js.map